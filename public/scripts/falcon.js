
/*
	Falcon.js
	by Rick Allen (stoodder)

	Version 0.0.2
	Full source at https://github.com/stoodder/falconjs
	Copyright (c) 2011 RokkinCat, http://www.rokkincat.com

	MIT License, https://github.com/stoodder/falconjs/blob/master/LICENSE.md
	This file is generated by `cake build`, do not edit it by hand.
*/

(function() {
  var $document, $window, Falcon, arrayContains, arrayPeek, arrayRemove, arrayUnique, arraysEqual, compact, countSubstrings, defer, delay, endsWith, extend, findKey, isArray, isBoolean, isEmpty, isFunction, isNumber, isObject, isString, key, objectKeys, objectValues, objectsEqual, startsWith, trim, trimSlashes, value, _bindingContext, _foreach, _getItems, _options, _ref, _shouldUpdate,
    __slice = Array.prototype.slice,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  isObject = function(object) {
    return (typeof object) === (typeof {}) && object !== null;
  };

  isFunction = function(object) {
    return Object.prototype.toString.call(object) === "[object Function]";
  };

  isBoolean = function(object) {
    return Object.prototype.toString.call(object) === "[object Boolean]";
  };

  isArray = function(object) {
    return Object.prototype.toString.call(object) === "[object Array]";
  };

  isString = function(object) {
    return Object.prototype.toString.call(object) === "[object String]";
  };

  isNumber = function(object) {
    return Object.prototype.toString.call(object) === "[object Number]";
  };

  isEmpty = function(object) {
    var key, value;
    if (isObject(object)) {
      for (key in object) {
        value = object[key];
        return false;
      }
      return true;
    } else if (isString(object) || isArray(object)) {
      return object.length === 0;
    } else if (object === null || typeof object === "undefined") {
      return true;
    }
    return false;
  };

  trim = function(str) {
    return str.replace(/^\s+/, '').replace(/\s+$/, '');
  };

  trimSlashes = function(str) {
    return str.replace(/^\//, '').replace(/\/$/, '');
  };

  startsWith = function(haystack, needle) {
    return haystack.indexOf(needle) === 0;
  };

  endsWith = function(haystack, needle) {
    return haystack.indexOf(needle, haystack.length - needle.length) !== -1;
  };

  countSubstrings = function(str, substr) {
    return str.split(substr).length - 1;
  };

  objectKeys = function(obj) {
    var key, _results;
    _results = [];
    for (key in obj) {
      _results.push(key);
    }
    return _results;
  };

  objectValues = function(obj) {
    var key, value, _results;
    _results = [];
    for (key in obj) {
      value = obj[key];
      _results.push(value);
    }
    return _results;
  };

  objectsEqual = function(obj1, obj2) {
    var key, value;
    for (key in obj1) {
      value = obj1[key];
      if (obj2[key] !== value) return false;
    }
    for (key in obj2) {
      value = obj2[key];
      if (obj1[key] !== value) return false;
    }
    return true;
  };

  compact = function(obj) {
    var key, newObj, value;
    if (!isObject(obj)) obj = {};
    newObj = {};
    for (key in obj) {
      value = obj[key];
      if (value != null) newObj[key] = value;
    }
    return newObj;
  };

  extend = function(obj, extender) {
    var key, value;
    if (obj == null) obj = {};
    if (!isObject(extender)) extender = {};
    for (key in extender) {
      value = extender[key];
      obj[key] = value;
    }
    return obj;
  };

  findKey = function(obj, value) {
    var k, v;
    for (k in obj) {
      v = obj[k];
      if (v === value) return k;
    }
  };

  arraysEqual = function(arr1, arr2) {
    var index, value, _len;
    if (arr1.length !== arr2.length) return false;
    for (index = 0, _len = arr1.length; index < _len; index++) {
      value = arr1[index];
      if (arr2[index] !== value) return false;
    }
    return true;
  };

  arrayPeek = function(arr) {
    return arr[arr.length - 1];
  };

  arrayContains = function(haystack, needle) {
    var hay, _i, _len;
    if (isFunction(haystack.indexOf)) {
      return haystack.indexOf(needle) !== -1;
    } else if (isArray(haystack)) {
      for (_i = 0, _len = haystack.length; _i < _len; _i++) {
        hay = haystack[_i];
        if (hay === needle) return true;
      }
    }
    return false;
  };

  arrayUnique = function(arr) {
    var key, obj, value, _i, _len;
    obj = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      key = arr[_i];
      obj[key] = true;
    }
    return (function() {
      var _results;
      _results = [];
      for (key in obj) {
        value = obj[key];
        _results.push(key);
      }
      return _results;
    })();
  };

  arrayRemove = function(arr, items) {
    var item, _i, _item, _len;
    if (!isArray(arr)) return [];
    if (!isArray(items)) items = [items];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      arr = (function() {
        var _j, _len2, _results;
        _results = [];
        for (_j = 0, _len2 = arr.length; _j < _len2; _j++) {
          _item = arr[_j];
          if (_item !== item) _results.push(_item);
        }
        return _results;
      })();
    }
    return arr;
  };

  delay = function(time, callback) {
    var _ref;
    if (isFunction(time)) {
      _ref = [callback, time], time = _ref[0], callback = _ref[1];
    }
    if (!isNumber(time)) time = 1;
    if (!isFunction(callback)) callback = (function() {});
    if (time < 1) time = 1;
    return setTimeout(callback, time);
  };

  defer = function(callback) {
    if (!isFunction(callback)) callback = (function() {});
    return setTimeout(callback, 1);
  };

  Falcon = {
    version: "0.0.2",
    applicationElement: "body",
    baseApiUrl: "",
    baseTemplateUrl: "",
    cache: true,
    apply: function(view, element, callback) {
      var _ref, _ref2;
      if (isFunction(element)) {
        _ref = [element, callback], callback = _ref[0], element = _ref[1];
      }
      if (!isString(element)) element = "";
      element = trim(element);
      if (isEmpty(element)) {
        element = (_ref2 = Falcon.applicationElement) != null ? _ref2 : "body";
      }
      return $(function() {
        $('template').each(function(index, template) {
          var identifier;
          template = $(template);
          identifier = template.attr("id");
          if (identifier != null) {
            Falcon.View.cacheTemplate("#" + identifier, template.html());
          }
          return template.remove();
        });
        if (isFunction(callback)) {
          if (view instanceof Falcon.View) {
            Falcon.View.on("init", callback);
          } else {
            callback();
          }
        }
        $(element).attr('data-bind', 'view: $data');
        return ko.applyBindings(view);
      });
    },
    isModel: function(object) {
      return (object != null) && object instanceof Falcon.Model;
    },
    isCollection: function(object) {
      return (object != null) && object instanceof Falcon.Collection;
    },
    isView: function(object) {
      return (object != null) && object instanceof Falcon.View;
    },
    isDataObject: function(object) {
      return (object != null) && (object instanceof Falcon.Model || object instanceof Falcon.Collection);
    },
    isFalconObject: function(object) {
      return (object != null) && (object instanceof Falcon.Class);
    }
  };

  this.Falcon = Falcon;

  $window = $(window);

  $document = $(document);

  Falcon.Class = (function() {

    Class.prototype["super"] = function() {};

    /*
    	# Method: Falcon.Class.extend
    	#	Used to extend (as in, inherit) from one class to another
    	#
    	# Arguments:
    	#	**parent** _(Object)_ - The parent to extend from
    	#	**definition** _(Object)_ - The child's class definition
    	#
    	# Returns:
    	#	_Object_ - The extended class
    */

    Class.extend = function(parent, definition) {
      var child, ctor;
      if (parent == null) parent = Falcon.Class;
      child = null;
      if ((definition != null) && definition.hasOwnProperty("constructor")) {
        child = definition.constructor;
      } else {
        child = function() {
          return this.__super__.apply(this, arguments);
        };
      }
      ctor = (function() {});
      ctor.prototype = parent.prototype;
      child.prototype = new ctor;
      child.prototype.__super__ = function() {
        return parent.apply(this, arguments);
      };
      child.extend = function(definition) {
        return Falcon.Class.extend(child, definition);
      };
      extend(child.prototype, definition != null ? definition : {});
      return child;
    };

    /*
    	# Local event storage
    */

    Class.prototype._events = null;

    /*
    	# Method: Falcon.Class()
    	#	The constructor method
    */

    function Class() {
      this._events = {};
    }

    /*
    	# Method: Falcon.Model#on()
    	#	Adds an event listener to a specific event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to listen tpo
    	#	**action** _(function)_ - The callback function to attach to this event
    	#	**context** _(mixed)_ - The context to apply to the callback. Defaults to this model
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */

    Class.prototype.on = function(event, action, context) {
      var _base, _ref;
      if (!(isString(event) && isFunction(action))) return this;
      if (context == null) context = this;
      event = trim(event).toLowerCase();
      if (isEmpty(event)) return this;
      ((_ref = (_base = this._events)[event]) != null ? _ref : _base[event] = []).push({
        action: action,
        context: context
      });
      return this;
    };

    /*
    	# Method: Falcon.Model#off()
    	#	Removes an event listener from an event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to remove from
    	#	**action** _(function)_ - The event handler to remove
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */

    Class.prototype.off = function(event, action) {
      var evt;
      if (!(isString(event) && isFunction(action))) return this;
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return this;
      this._events[event] = (function() {
        var _i, _len, _ref, _results;
        _ref = this._events[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          evt = _ref[_i];
          if (evt.action !== action) _results.push(evt);
        }
        return _results;
      }).call(this);
      return this;
    };

    /*
    	# Method: Falcon.Model#has
    	#	Method used to see if this model has a specific event attached
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to look at
    	#	**action** _(function)_ - The event handler to look for
    	#
    	# Returns:
    	#	_(boolean)_ - Did we find the event?
    */

    Class.prototype.has = function(event, action) {
      var evt, _i, _len, _ref;
      if (!(isString(event) && isFunction(action))) return false;
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return false;
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        if (evt.action === action) return true;
      }
      return false;
    };

    /*
    	# Method: Falcon.Model#relay
    	#	Relay's a specific event when called on an object through this object
    	#
    	# Arguments:
    	#	**object** _(string)_ - The event to look at
    	#	**event** _(function)_ - The event handler to look for
    	#
    	# Returns:
    	#	_(Falcon.Class)_ - This instance
    */

    Class.prototype.relay = function(object, event) {
      var _ref,
        _this = this;
      if (!isString(event)) {
        _ref = [event, object], object = _ref[0], event = _ref[1];
      }
      if (!Falcon.isFalconObject(object)) return this;
      if (isEmpty(event)) return this;
      object.on(event, function() {
        return _this.trigger.apply(_this, [event].concat(__slice.call(arguments)));
      });
      return this;
    };

    /*
    	# Method: Falcon.Model#trigger()
    	#	Used to trigger a specific event
    	#
    	# Arguments:
    	#	**event** _(string)_ - The event to trigger
    	#	**args...** _(arguments)_ - Additional arguments to pass into the
    	#								event listeners
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - This instance
    */

    Class.prototype.trigger = function() {
      var args, event, evt, _i, _len, _ref;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!isString(event)) return this;
      event = trim(event).toLowerCase();
      if (isEmpty(event) || !(this._events[event] != null)) return this;
      _ref = this._events[event];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        evt.action.apply(evt.context, args);
      }
      return this;
    };

    return Class;

  })();

  Falcon.Model = (function(_super) {

    __extends(Model, _super);

    Model.extend = function(properties) {
      return Falcon.Class.extend(Falcon.Model, properties);
    };

    Model.prototype.id = null;

    Model.prototype.url = null;

    Model.prototype.parent = null;

    Model.prototype.fields = null;

    Model.prototype.loading = false;

    function Model(data, parent) {
      var field, model_field, _ref, _ref2;
      Model.__super__.constructor.call(this);
      data = ko.utils.unwrapObservable(data);
      parent = ko.utils.unwrapObservable(parent);
      if (!(parent != null) && Falcon.isModel(data)) {
        _ref = [data, parent], parent = _ref[0], data = _ref[1];
      }
      if (Falcon.isModel(data)) data = data.unwrap();
      this.loading = ko.observable(this.loading);
      if (this.fields === null) this.fields = {};
      this.parent = parent;
      this.initialize(data);
      this.fill(data);
      _ref2 = this.fields;
      for (field in _ref2) {
        model_field = _ref2[field];
        if (!(this[model_field] != null) && isString(model_field)) {
          this[model_field] = null;
        }
      }
    }

    Model.prototype.initialize = function(data) {};

    Model.prototype.get = function(key) {
      if (!isString(key)) return this.undefined;
      return ko.utils.unwrapObservable(this[key]);
    };

    Model.prototype.set = function(key, value) {
      var k, v;
      if (isObject(key)) {
        for (k in key) {
          v = key[k];
          this.set(k, v);
        }
        return this;
      }
      if (!isString(key)) return this;
      if (ko.isObservable(this[key])) {
        this[key](value);
      } else {
        this[key] = value;
      }
      return this;
    };

    Model.prototype.toggle = function(key) {
      return this.set(key, !this.get(key));
    };

    Model.prototype.fill = function(_data) {
      var acceptedKeys, data, key, protoKeys, rejectedKeys, value, _ref;
      if (isNumber(_data)) {
        _data = {
          'id': _data
        };
      }
      if (!isObject(_data)) return this;
      if (Falcon.isModel(_data)) _data = _data.unwrap();
      data = {};
      if (isObject(this.fields) && !isEmpty(this.fields)) {
        for (key in _data) {
          value = _data[key];
          data[(_ref = this.fields[key]) != null ? _ref : key] = value;
        }
      } else {
        data = _data;
      }
      protoKeys = objectKeys(Falcon.Model.prototype);
      acceptedKeys = arrayRemove(objectKeys(this), protoKeys);
      rejectedKeys = arrayRemove(protoKeys, acceptedKeys);
      rejectedKeys = arrayRemove(rejectedKeys, "id");
      rejectedKeys = arrayUnique(rejectedKeys);
      for (key in data) {
        value = data[key];
        if (!(!(__indexOf.call(rejectedKeys, key) >= 0))) continue;
        value = ko.utils.unwrapObservable(value);
        if (Falcon.isDataObject(this[key])) {
          this[key].fill(value);
        } else if (ko.isObservable(this[key])) {
          if (ko.isWriteableObservable(this[key])) this[key](value);
        } else {
          this[key] = value;
        }
      }
      return this;
    };

    Model.prototype.unwrap = function() {
      var key, keys, raw, value, _i, _len;
      raw = {};
      keys = arrayRemove(objectKeys(this), objectKeys(Falcon.Model.prototype));
      keys[keys.length] = "id";
      keys = arrayUnique(keys);
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        value = this[key];
        raw[key] = Falcon.isDataObject(value) ? value.unwrap() : value;
      }
      return raw;
    };

    Model.prototype.serialize = function(fields, deep) {
      var field, index, model_field, model_key, model_keys, raw, server_field, server_key, server_keys, value, _i, _j, _len, _len2, _ref, _ref2;
      raw = {};
      if (!isBoolean(deep) && isBoolean(fields)) {
        _ref = [fields, deep], deep = _ref[0], fields = _ref[1];
      }
      if (!isBoolean(deep)) deep = true;
      if (isString(fields)) fields = trim(fields).split(",");
      if (fields == null) fields = this.fields;
      server_keys = [];
      model_keys = [];
      if (isArray(fields) && !isEmpty(fields)) {
        if (isObject(this.fields)) {
          for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            server_keys[server_keys.length] = (_ref2 = findKey(this.fields, field)) != null ? _ref2 : field;
            model_keys[model_keys.length] = field;
          }
        } else {
          for (_j = 0, _len2 = fields.length; _j < _len2; _j++) {
            field = fields[_j];
            server_keys[server_keys.length] = field;
            model_keys[model_keys.length] = field;
          }
        }
      } else if (isObject(fields) && !isEmpty(fields)) {
        for (server_field in fields) {
          model_field = fields[server_field];
          server_keys[server_keys.length] = server_field;
          model_keys[model_keys.length] = model_field in this ? model_field : server_field;
        }
      } else {
        server_keys = model_keys = arrayRemove(objectKeys(this), objectKeys(Falcon.Model.prototype));
      }
      server_keys.push("id");
      server_keys = arrayUnique(server_keys);
      model_keys.push("id");
      model_keys = arrayUnique(model_keys);
      for (index in model_keys) {
        model_key = model_keys[index];
        server_key = server_keys[index];
        value = this[model_key];
        if (Falcon.isDataObject(value)) {
          raw[server_key] = deep ? value.serialize() : value.serialize(["id"]);
        } else if (ko.isObservable(value)) {
          raw[server_key] = ko.utils.unwrapObservable(value);
        } else if (!isFunction(value)) {
          raw[server_key] = value;
        }
      }
      return raw;
    };

    Model.prototype.makeUrl = function(type, parent) {
      var ext, parentPeriodIndex, parentSlashIndex, parentUrl, periodIndex, url;
      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) url = "";
      url = trim(url);
      if (!isString(type)) type = "";
      type = type.toUpperCase();
      if (type !== 'GET' && type !== 'PUT' && type !== 'POST' && type !== 'DELETE') {
        type = 'GET';
      }
      parent = Falcon.isModel(parent) ? parent : this.parent;
      ext = "";
      periodIndex = url.lastIndexOf(".");
      if (periodIndex > -1) {
        ext = url.slice(periodIndex);
        url = url.slice(0, periodIndex);
      }
      if (!startsWith(url, "/")) url = "/" + url;
      if (Falcon.isModel(parent)) {
        parentUrl = parent.makeUrl();
        parentPeriodIndex = parentUrl.lastIndexOf(".");
        parentSlashIndex = parentUrl.lastIndexOf("/");
        if (parentSlashIndex < parentPeriodIndex) {
          if (parentPeriodIndex > -1) {
            parentUrl = parentUrl.slice(0, parentPeriodIndex);
          }
          parentUrl = trim(parentUrl);
        }
        url = "" + parentUrl + url;
      } else if (isString(Falcon.baseApiUrl)) {
        url = "" + Falcon.baseApiUrl + url;
      }
      if (type === "GET" || type === "PUT" || type === "DELETE") {
        if (url.slice(-1) !== "/") url += "/";
        url += ko.utils.unwrapObservable(this.id);
      }
      console.log("" + url + ext);
      return "" + url + ext;
    };

    Model.prototype.sync = function(type, options) {
      var data, json, key, url, value, _ref, _ref2,
        _this = this;
      if (isFunction(options)) {
        options = {
          complete: options
        };
      }
      if (isString(options)) {
        options = trim(options);
        options = {
          fields: options.split(",")
        };
      }
      if (isArray(options)) {
        options = {
          fields: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isObject(options.data)) options.data = {};
      if (!isString(options.dataType)) options.dataType = "json";
      if (!isString(options.contentType)) options.contentType = "application/json";
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isFunction(options.complete)) options.complete = (function() {});
      if (!isFunction(options.error)) options.error = (function() {});
      if (!Falcon.isModel(options.parent)) options.parent = this.parent;
      if (!isArray(options.fields)) options.fields = [];
      if (!isObject(options.params)) options.params = {};
      if (!isBoolean(options.fill)) options.fill = true;
      type = trim(isString(type) ? type.toUpperCase() : "GET");
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      data = {};
      if (!isEmpty(options.data)) {
        _ref = options.data;
        for (key in _ref) {
          value = _ref[key];
          data[key] = value;
        }
      }
      if (type === "POST" || type === "PUT") {
        data = extend(this.serialize(options.fields), data);
      }
      json = isEmpty(data) ? "" : JSON.stringify(data);
      url = (_ref2 = options.url) != null ? _ref2 : this.makeUrl(type, options.parent);
      if (!isEmpty(options.params)) {
        if (!(url.indexOf("?") > -1)) url += "?";
        url += ((function() {
          var _ref3, _results;
          _ref3 = options.params;
          _results = [];
          for (key in _ref3) {
            value = _ref3[key];
            _results.push("" + key + "=" + value);
          }
          return _results;
        })()).join("&");
      }
      this.loading(true);
      $.ajax({
        'url': url,
        'type': type,
        'data': json,
        'dataType': options.dataType,
        'contentType': options.contentType,
        'cache': Falcon.cache,
        'beforeSend': function(xhr) {
          return xhr.withCredentials = true;
        },
        'success': function(data, status, xhr) {
          var _ref3;
          if (options.fill) _this.fill(data);
          switch (type) {
            case "GET":
              _this.trigger("fetch", data);
              break;
            case "POST":
              _this.trigger("create", data);
              break;
            case "PUT":
              _this.trigger("save", data);
              break;
            case "DELETE":
              _this.trigger("destroy", data);
          }
          return (_ref3 = options.success).call.apply(_ref3, [_this, _this].concat(__slice.call(arguments)));
        },
        'error': function(xhr) {
          var response;
          response = xhr.responseText;
          try {
            if (isString(response)) response = JSON.parse(response);
          } catch (e) {

          }
          return options.error.call(_this, _this, response, xhr);
        },
        'complete': function(xhr) {
          var _ref3;
          console.log(xhr.getAllResponseHeaders());
          _this.loading(false);
          return (_ref3 = options.complete).call.apply(_ref3, [_this, _this].concat(__slice.call(arguments)));
        }
      });
      return this;
    };

    Model.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    Model.prototype.create = function(options) {
      return this.sync('POST', options);
    };

    Model.prototype.save = function(options) {
      return this.sync('PUT', options);
    };

    Model.prototype.destroy = function(options) {
      return this.sync('DELETE', options);
    };

    Model.prototype.map = function(mapping) {
      var key, value,
        _this = this;
      if (!isObject(mapping)) mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (Falcon.isDataObject(this[key])) {
          this[key].map(value);
        } else {
          if (ko.isObservable(value)) {
            this[key] = ko.observable(ko.utils.unwrapObservable(value));
          } else if (isFunction(value)) {
            (function() {
              var _value;
              _value = value;
              return _this[key] = function() {
                var args;
                args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                return _value.call.apply(_value, [_this, _this].concat(__slice.call(args)));
              };
            })();
          } else {
            this[key] = value;
          }
        }
      }
      return this;
    };

    Model.prototype.clone = function(parent) {
      parent = (parent != null) || parent === null ? parent : this.parent;
      return new this.constructor(this.unwrap(), parent);
    };

    Model.prototype.isNew = function() {
      return isNumber(ko.utils.unwrapObservable(this.id));
    };

    return Model;

  })(Falcon.Class);

  /*
  # Class: Falcon.View
  #	Class hat represents a view on the screen
  #
  # TODO:
  #	Add the on/off methods
  */

  Falcon.View = (function(_super) {
    var templateCache, _initialized, _loadingCount;

    __extends(View, _super);

    /*
    	# The internal cache of each template identified by 
    	# their url or element id
    */

    templateCache = {};

    /*
    	# Counter to track how many things are loading
    */

    _loadingCount = 0;

    _initialized = false;

    /*
    	# Method: Falcon.View.cacheTemplate( identifier, template )
    	#	Method used to manually cache a template
    	#
    	# Arguments:
    	#	**identifier** _(String)_ - The identifier for the templae
    	#	**template** _(String)_ - The template to store
    */

    View.cacheTemplate = function(identifier, template) {
      if (!isString(identifier)) identifier = "";
      if (!isString(template)) template = "";
      identifier = trim(identifier);
      templateCache[identifier] = template;
    };

    /*
    	#
    	#
    */

    View._events = {};

    View.on = function() {
      return Falcon.Class.prototype.on.apply(this, arguments);
    };

    View.off = function() {
      return Falcon.Class.prototype.off.apply(this, arguments);
    };

    View.has = function() {
      return Falcon.Class.prototype.has.apply(this, arguments);
    };

    View.trigger = function() {
      return Falcon.Class.prototype.trigger.apply(this, arguments);
    };

    View.trigger;

    /*
    	# Method used to track when a template is loaded
    */

    View.tick = function() {
      return _loadingCount++;
    };

    View.loaded = function() {
      _loadingCount--;
      if (_loadingCount === 0) {
        if (_initialized === false) {
          Falcon.View.trigger("init");
          _initialized = true;
        }
        return Falcon.View.trigger("load");
      }
    };

    /*
    	#
    */

    View.extend = function(definition) {
      return Falcon.Class.extend(Falcon.View, definition);
    };

    /*
    	#
    */

    View.prototype.url = null;

    /*
    	#
    */

    View.prototype.template = null;

    /*
    	# Method: Falcon.View()
    	#	The constuctor method for the view class
    */

    function View() {
      var url, _loaded, _ref,
        _this = this;
      View.__super__.constructor.call(this);
      Falcon.View.tick();
      this.template = ko.observable();
      url = this.makeUrl();
      this.isLoaded = ko.observable(false);
      _loaded = function() {
        _this.isLoaded(true);
        defer(function() {
          return _this.trigger("load");
        });
        return Falcon.View.loaded();
      };
      if (isEmpty(url)) {
        _loaded();
      } else if (url in templateCache) {
        this.template(templateCache[url]);
        _loaded();
      } else if (startsWith(url, "#")) {
        this.template((_ref = templateCache[url]) != null ? _ref : templateCache[url] = $(url).html());
        _loaded();
      } else {
        $.ajax({
          url: url,
          type: "GET",
          cache: false,
          error: function() {
            return console.log("ERROR LOADING TEMPLATE " + url);
          },
          success: function(html) {
            _this.template(templateCache[_this.url] = html);
            return _loaded();
          }
        });
      }
      this.initialize.apply(this, arguments);
    }

    View.prototype.makeUrl = function() {
      var url;
      url = ko.utils.unwrapObservable(this.url);
      if (!isString(url)) url = "";
      url = trim(url);
      if (isString(Falcon.baseTemplateUrl)) {
        url = "" + Falcon.baseTemplateUrl + url;
      }
      return url;
    };

    /*
    	#
    */

    View.prototype.initialize = (function() {});

    /*
    	# Method Falcon.View#viewModel
    	#	Get's a view model representing this view
    */

    View.prototype.viewModel = function() {
      var key, value, viewModel,
        _this = this;
      viewModel = {
        __falcon__: true
      };
      for (key in this) {
        value = this[key];
        if (!(!(key in Falcon.View.prototype))) continue;
        if (isFunction(value) && !ko.isObservable(value)) {
          value = (function() {
            var _value;
            _value = value;
            return function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              return _value.call.apply(_value, [_this].concat(__slice.call(args)));
            };
          })();
        }
        viewModel[key] = value;
      }
      return viewModel;
    };

    /*
    	#
    */

    View.prototype.load = function(callback) {
      this.on("load", callback);
      if (this.isLoaded()) return this.trigger("load");
    };

    /*
    	# Method: Falcon.View#dispose
    	#	Executed when this view is disposed to the garbage collector (Doesn't work yet)
    */

    View.prototype.dispose = (function() {});

    /*
    	# Method: Falcon.View#call()
    	#	Used to make a 'call' method of a specific method on this view.
    	#	useful for attaching a view's method to events in a template so that
    	#	they can be called when an event is fired (without having to do any
    	#	currying/method wrapping)
    	#
    	# Arguments:
    	#	**method** _(string)_ - The view method to call
    	#
    	# Returns:
    	#	_(Function)_ - A wrapped version of the method
    */

    View.prototype.call = function(method) {
      var _args, _method,
        _this = this;
      if (!isString(method)) throw new Error("Method must be a string");
      _method = this[method];
      if (!isFunction(_method)) {
        throw new Error("'" + method + "' is not a valid method.");
      }
      _args = Array.prototype.slice.call(arguments, 1);
      return function() {
        return _method.apply(_this, _args);
      };
    };

    return View;

  })(Falcon.Class);

  Falcon.Collection = (function(_super) {
    var _makeIterator;

    __extends(Collection, _super);

    /*
    	#
    */

    Collection.prototype._mappings = null;

    /*
    	#
    */

    Collection.extend = function(definition) {
      return Falcon.Class.extend(Falcon.Collection, definition);
    };

    /*
    	#
    */

    Collection.prototype.list = null;

    /*
    	#
    */

    Collection.prototype.model = null;

    /*
    	#
    */

    Collection.prototype.__change_count__ = 0;

    Collection.prototype.url = null;

    Collection.prototype.length = 0;

    Collection.prototype.parent = null;

    /*
    	#
    */

    Collection.prototype.loading = false;

    /*
    	#
    */

    function Collection(models, parent) {
      var _ref,
        _this = this;
      Collection.__super__.constructor.call(this);
      models = ko.utils.unwrapObservable(models);
      parent = ko.utils.unwrapObservable(parent);
      if (!(parent != null) && Falcon.isModel(models)) {
        _ref = [models, parent], parent = _ref[0], models = _ref[1];
      }
      if (this.model != null) {
        if (this.url == null) this.url = this.model.prototype.url;
      }
      this.parent = parent;
      this.length = ko.observable(ko.utils.unwrapObservable(this.length));
      this.loading = ko.observable(ko.utils.unwrapObservable(this.loading));
      this.populated = ko.computed(function() {
        return _this.length() > 0;
      });
      this._mappings = [];
      this.reset().fill(models);
      this.initialize(models);
    }

    /*
    	#
    */

    Collection.prototype.initialize = (function() {});

    /*
    	# Method: Falcon.Collection#fill()
    	#	'fills' this collection with new data
    	#
    	# Arguments:
    	#	**items** _(Array)_ - An array of items to fill this collection with
    	#
    	# Returns:
    	#	_Falcon.Collection_ - This instance
    */

    Collection.prototype.fill = function(items, options) {
      var i, item, list, m, mapping, method, models, _i, _len, _len2, _ref, _return;
      if (this.model == null) return this;
      if (items == null) items = [];
      if (Falcon.isCollection(items)) items = items.list();
      if (ko.isObservable(items)) items = ko.utils.unwrapObservable(items);
      if (!isArray(items)) items = [items];
      models = [];
      if (options == null) options = {};
      if (!isObject(options)) options = {};
      method = options.method;
      if (!isString(method)) method = '';
      method = method.toLowerCase();
      if (method !== 'replace' && method !== 'append' && method !== 'prepend') {
        method = 'replace';
      }
      this.__change_count__++;
      _return = [];
      for (i = 0, _len = items.length; i < _len; i++) {
        m = items[i];
        _return[i] = models[i] = new this.model({}, this.parent);
        _ref = this._mappings;
        for (_i = 0, _len2 = _ref.length; _i < _len2; _i++) {
          mapping = _ref[_i];
          models[i].map(mapping);
        }
        models[i].fill(Falcon.isModel(m) ? m.serialize() : m);
      }
      if (method === 'replace') {
        this.list(models);
      } else if (method === 'prepend') {
        list = (function() {
          var _j, _len3, _ref2, _results;
          _ref2 = this.list();
          _results = [];
          for (_j = 0, _len3 = _ref2.length; _j < _len3; _j++) {
            item = _ref2[_j];
            _results.push(item);
          }
          return _results;
        }).call(this);
        while (models.length > 0) {
          list.unshift(models.pop());
        }
        this.list(list);
      } else if (method === 'append') {
        list = this.list();
        list = (function() {
          var _j, _len3, _results;
          _results = [];
          for (_j = 0, _len3 = list.length; _j < _len3; _j++) {
            item = list[_j];
            _results.push(item);
          }
          return _results;
        })();
        while (models.length > 0) {
          list.push(models.shift());
        }
        this.list(list);
      }
      this.length(this.list().length);
      return _return;
    };

    /*
    	# Method: Falcon.Collection#unwrap()
    	#	Method used to 'unwrap' this object into an anonmous object
    	#	Needed to cascade inwards on other Falcon Data objects (like lists)
    	#	to unwrap newly added member variables/objects
    	#
    	# Returns:
    	#	_Array_ - The 'unwrapped' array
    */

    Collection.prototype.unwrap = function() {
      var i, raw, value, _ref;
      raw = [];
      _ref = this.list();
      for (i in _ref) {
        value = _ref[i];
        raw[i] = Falcon.isDataObject(value) ? value.unwrap() : value;
      }
      return raw;
    };

    /*
    	# Method: Falcon.Collection#serialize()
    	#	Serializes this collection and returns the raw array
    	#	of data
    	#
    	# Arguments:
    	#	**fields** _(Array)_ -	The fields that should be included in the 
    	#	                      	serialization "id" is always included. If 
    	#	                      	none given, all fields from this models 'fields' 
    	#	                      	member are serialized
    	#
    	#	**deep** _(Boolean)_ -	should we do a deep copy? In otherwords, should 
    	#	                      	we cascade downwards to serialize data about 
    	#	                      	children models.
    	#
    	# Returns:
    	#	_Array_ - an array of the serialized raw data to send to the server
    */

    Collection.prototype.serialize = function(fields, deep) {
      var i, raw, value, _ref;
      raw = [];
      _ref = this.list();
      for (i in _ref) {
        value = _ref[i];
        raw[i] = Falcon.isDataObject(value) ? value.serialize(fields, deep) : value;
      }
      return raw;
    };

    /*
    	# Method: Falcon.Collection#makeUrl
    */

    Collection.prototype.makeUrl = function(type) {
      var parentPeriodIndex, parentSlashIndex, parentUrl, url;
      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) url = "";
      url = trim(url);
      if (!isString(type)) type = "";
      type = type.toUpperCase();
      if (type !== 'GET' && type !== 'PUT' && type !== 'POST' && type !== 'DELETE') {
        type = 'GET';
      }
      if (!startsWith(url, "/")) url = "/" + url;
      if (Falcon.isModel(this.parent)) {
        parentUrl = this.parent.makeUrl();
        parentPeriodIndex = parentUrl.lastIndexOf(".");
        parentSlashIndex = parentUrl.lastIndexOf("/");
        if (parentSlashIndex < parentPeriodIndex) {
          if (parentPeriodIndex > -1) {
            parentUrl = parentUrl.slice(0, parentPeriodIndex);
          }
          parentUrl = trim(parentUrl);
        }
        url = "" + parentUrl + url;
      } else if (isString(Falcon.baseApiUrl)) {
        url = "" + Falcon.baseApiUrl + url;
      }
      return url;
    };

    /*
    	#
    */

    Collection.prototype.fetch = function(options) {
      return this.sync('GET', options);
    };

    /*
    	#
    */

    Collection.prototype.sync = function(type, options) {
      var data, key, url, value, _ref, _ref2,
        _this = this;
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isObject(options.data)) options.data = {};
      if (!isString(options.dataType)) options.dataType = "json";
      if (!isString(options.contentType)) options.contentType = "application/json";
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isFunction(options.complete)) options.complete = (function() {});
      if (!isFunction(options.error)) options.error = (function() {});
      if (!isObject(options.params)) options.params = {};
      if (!isBoolean(options.fill)) options.fill = true;
      type = isString(type) ? type.toUpperCase() : "GET";
      if (type !== "GET" && type !== "POST" && type !== "PUT" && type !== "DELETE") {
        type = "GET";
      }
      type = trim(type);
      data = {};
      if (!isEmpty(options.data)) {
        _ref = options.data;
        for (key in _ref) {
          value = _ref[key];
          data[key] = value;
        }
      }
      url = (_ref2 = options.url) != null ? _ref2 : trim(this.makeUrl(type));
      if (!((url != null) && isString(url))) return;
      if (!isEmpty(options.params)) {
        if (!(url.indexOf("?") > -1)) url += "?";
        url += ((function() {
          var _ref3, _results;
          _ref3 = options.params;
          _results = [];
          for (key in _ref3) {
            value = _ref3[key];
            _results.push("" + key + "=" + value);
          }
          return _results;
        })()).join("&");
      }
      this.loading(true);
      $.ajax({
        'url': url,
        'type': type,
        'data': data,
        'dataType': options.dataType,
        'contentType': options.contentType,
        'cache': Falcon.cache,
        'beforeSend': function(xhr) {
          return xhr.withCredentials = true;
        },
        'success': function(data, status, xhr) {
          var _ref3;
          if (data == null) data = [];
          if (isString(data)) data = JSON.parse(data);
          if (isEmpty(data)) data = JSON.parse(xhr.responseText);
          if (options.fill && type === "GET") _this.fill(data, options);
          return (_ref3 = options.success).call.apply(_ref3, [_this, _this].concat(__slice.call(arguments)));
        },
        'error': function(xhr) {
          var response;
          response = xhr.responseText;
          try {
            if (isString(response)) response = JSON.parse(response);
          } catch (e) {

          }
          return options.error.call(_this, _this, response, xhr);
        },
        'complete': function() {
          var _ref3;
          _this.loading(false);
          return (_ref3 = options.complete).call.apply(_ref3, [_this, _this].concat(__slice.call(arguments)));
        }
      });
      return this;
    };

    /*
    	# Method: Falcon.Collection#remove
    	#	Used to simplu remove elements from the current collection
    	#	Does not actually delete the data from the server
    	#
    	# Arguments:
    	#	**items** _(Array)_ - An array (or an item) to remove from the list
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    */

    Collection.prototype.remove = function(items) {
      var removedItems;
      items = ko.utils.unwrapObservable(items);
      if (Falcon.isCollection(items)) items = items.list();
      this.__change_count__++;
      removedItems = isArray(items) ? this.list.removeAll(items) : this.list.remove(items);
      if (!isEmpty(removedItems)) this.length(this.list().length);
      return this;
    };

    /*
    	#
    */

    Collection.prototype.append = function(items) {
      return this.fill(items, {
        'method': 'append'
      });
    };

    /*
    	#
    */

    Collection.prototype.prepend = function(items) {
      return this.fill(items, {
        'method': 'prepend'
      });
    };

    /*
    	# Method: Falcon.Collection#unshift
    	#	Push an element onto the begining of the array, Alias of prepend
    	#
    	# Arguments:
    	#	**item** _(Falcon.Model)_ - The model to add
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    	#
    	# See Also:
    	#	Falcon.Colletion#prepend
    */

    Collection.prototype.unshift = function() {
      return this.prepend.apply(this, arguments);
    };

    /*
    	# Method: Falcon.Collection#shift
    	#	Shifts the first element from the list and returns it
    */

    Collection.prototype.shift = function() {
      var item;
      item = this.list.shift();
      this.length(this.list().length);
      return item;
    };

    /*
    	# Method: Falcon.Collection#push
    	#	Push an element onto the end of the array, Alias of append
    	#
    	# Arguments:
    	#	**item** _(Falcon.Model)_ - The model to add
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    	#
    	# See Also:
    	#	Falcon.Colletion#append
    */

    Collection.prototype.push = function() {
      return this.append.apply(this, arguments);
    };

    /*
    	# Method: Falcon.Collection#pop
    	#	Pops the last element from the list and returns it
    */

    Collection.prototype.pop = function() {
      var item;
      item = this.list.pop();
      this.length(this.list().length);
      return item;
    };

    /*
    	# Method: Falcon.Collection#sort
    	#	Sorts the collection by a given sorter
    	#
    	# Arguments:
    	#	**sorter** _(Function)_ - An iterator to sort the array with
    	#
    	# Returns:
    	#	_(Array)_ - The sorted array
    */

    Collection.prototype.sort = function(sorter) {
      var list;
      list = this.list();
      if (!isArray(list)) return;
      if (!isFunction(sorter)) return list;
      return list.sort(sorter);
    };

    /*
    	# Method: Falcon.Collection#create
    	#	Creates a new model and adds it to the list of eisting models, 
    	#	also sends off a corresponding ajax request
    	#
    	# Returns:
    	#	_XmlHttpRequest_ - The XHR object that corresponds to this create instance
    */

    Collection.prototype.create = function(data, options) {
      var _success,
        _this = this;
      if (this.model == null) return;
      if (Falcon.isModel(data)) data = data.unwrap();
      if (!isObject(data)) data = {};
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      if (!isString(options.method)) options.method = 'append';
      _success = options.success;
      options.success = function(model) {
        var models;
        models = _this.fill(model, options);
        if (models.length === 1) arguments[0] = models = models[0];
        return _success.apply(models, arguments);
      };
      return new this.model(data, this.parent).create(options);
    };

    /*
    	# Method: Falcon.Collection#destroy
    	#	Removes the specified models from the collection and database
    	#	executing each of te models destroy method and passing the
    	#	'options' parameter along with the destroy call
    	#
    	# Arguments:
    	#	**models** _(Array)_ - An array of the models to remove, if this is not an array, 
    	#						   it will be placed in one as the only object, if the models 
    	#						   is a collection, we will destroy all of the models in the list.
    	#						   When no argument is given for models (or the argument is the 
    	#						   string 'all'), we'll destroy everything.
    	#
    	#	**options** _(Object)_ - An optional object of the settings to call when onto each 
    	#							 of the destroy methods of the 
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    */

    Collection.prototype.destroy = function(models, options) {
      var model, _i, _len, _success,
        _this = this;
      if (this.model == null) return this;
      models = ko.utils.unwrapObservable(models);
      if (!((models != null) && models !== 'all')) models = this.list();
      if (Falcon.isCollection(models)) models = models.list();
      if (!isArray(models)) models = [models];
      if (isEmpty(models)) return this;
      if (isFunction(options)) {
        options = {
          success: options
        };
      }
      if (!isObject(options)) options = {};
      if (!isFunction(options.success)) options.success = (function() {});
      options.parent = this.parent;
      _success = options.success;
      options.success = function(model) {
        _this.remove(model);
        return _success.apply(model, arguments);
      };
      for (_i = 0, _len = models.length; _i < _len; _i++) {
        model = models[_i];
        if (Falcon.isDataObject(model)) model.destroy(options);
      }
      return this;
    };

    /*
    	# Method: Falcon.Collection#at
    	#	Gets a the value at the specified index
    	#
    	# Arguments:
    	#	**index** _(Number)_ - The index to retrieve the value from
    	#
    	# Returns:
    	#	_(Falcon.Model)_ - The model at that index
    */

    Collection.prototype.at = function(index) {
      var list;
      if (!isNumber(index)) index = 0;
      index = parseInt(index);
      list = this.list();
      if (index < 0) index = 0;
      if (index >= list.length) index = list.length - 1;
      return list[index];
    };

    /*
    	# Method: Falcon.Collection#each
    	#
    	# Arguments:
    	#	**iterator** _(Function)_ - The iterator to loop over each value, if one argument is provided 
    	#								the input argument will be each item, if two are provided that input 
    	#								parameters will be index, item.
    	#
    	#	**context** _(mixed)_ - The context to bind the iterator against, if none is provided it defaults
    	#							to this collection.
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    */

    Collection.prototype.each = function(iterator, context) {
      var index, item, _i, _len, _len2, _ref, _ref2;
      if (!isFunction(iterator)) return this;
      if (context == null) context = this;
      if (iterator.length === 1) {
        _ref = this.list();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          iterator.call(context, item);
        }
      } else {
        _ref2 = this.list();
        for (item = 0, _len2 = _ref2.length; item < _len2; item++) {
          index = _ref2[item];
          iterator.call(context, index, item);
        }
      }
      return this;
    };

    /*
    	# Method: _makeIterator
    	#	Private method used to consistently generate iterators for 
    	#	the following search functions
    */

    _makeIterator = function(iterator) {
      var _id, _model;
      if (Falcon.isModel(iterator)) {
        _model = iterator;
        return function(item) {
          var id, model_id;
          if (!Falcon.isModel(item)) return false;
          id = item.get('id');
          model_id = _model.get('id');
          return id === model_id;
        };
      }
      if (isNumber(iterator)) {
        _id = iterator;
        return function(model) {
          return model.get("id") === _id;
        };
      }
      return iterator;
    };

    /*
    	# Method: Falcon.Collection#first
    	#	Retrieves the first value from the internal list based on an interator.  
    	#	If no iterator is present, the first value is returned.  
    	#	If no values match or exist, then null is returned
    */

    Collection.prototype.first = function(iterator) {
      var item, _i, _len, _ref;
      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        iterator = (function() {
          return true;
        });
      }
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (iterator(item)) return item;
      }
      return null;
    };

    /*
    	#
    */

    Collection.prototype.last = function(iterator) {
      var i, item, list;
      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) {
        iterator = (function() {
          return true;
        });
      }
      list = this.list();
      for (i in list) {
        item = list[i];
        item = list[list.length - i - 1];
        if (iterator(item)) return item;
      }
      return null;
    };

    /*
    	# Method: Falcon.Collection#slice
    	#	Slices the underlying collection the same way slice works on an array
    	#
    	# Arguments:
    	#	**start** _(Number)_ - Required. An integer that specifies where to start 
    	#						   the selection (The first element has an index of 0). 
    	#						   Use negative numbers to select from the end of an array.
    	#	**end** _(Number)_ - Optional. An integer that specifies where to end the selection. 
    	#						 If omitted, all elements from the start position and to the 
    	#						 end of the array will be selected. Use negative numbers to 
    	#						 select from the end of an array
    	#
    	# Returns:
    	#	_(Array)_ - The sliced array of models from the underlying array in this collection
    */

    Collection.prototype.slice = function(start, end) {
      return this.list.slice(start, end);
    };

    /*
    	# Method: Falcon.Collection#all
    	#	Gets a list of all elements that match the iterator, if one is given
    	#
    	# Arguments:
    	#	**iterator** _(Function)_ - The iterator to check if this item belongs in the response list
    	#
    	# Returns:
    	#	_(Array)_ - An array of all the matched items
    */

    Collection.prototype.all = function(iterator) {
      var item;
      iterator = _makeIterator(iterator);
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.list();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (iterator(item)) _results.push(item);
        }
        return _results;
      }).call(this);
    };

    /*
    	# Method: Falcon.Collection#any
    	#	Checks to see if any of the values match the iterator in this list
    */

    Collection.prototype.any = function(iterator) {
      var item, _i, _len, _ref;
      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) return false;
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (iterator(item)) return true;
      }
      return false;
    };

    /*
    	# Method: Falcon.Collection#without
    	#	Returns an array of elements that don't match the iterator
    */

    Collection.prototype.without = function(iterator) {
      var item;
      iterator = _makeIterator(iterator);
      if (!isFunction(iterator)) return this.list();
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.list();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          if (!iterator(item)) _results.push(item);
        }
        return _results;
      }).call(this);
    };

    /*
    	# Method: Falcon.Collection#map
    	#	Adds a mapping to all of the models in the current list and any future models that are added.
    	#	Mappings are added onto a stack of mappings.  When the list changes, all of the mappings will
    	#	be re-executed.
    	#
    	# Arguments:
    	#	**mapping** _(object)_ - The mapping to apply and save
    	#
    	# Returns:
    	#	_(Falcon.Collection)_ - This instance
    */

    Collection.prototype.map = function(mapping) {
      var key, model, value, _i, _len, _mapping, _ref,
        _this = this;
      if (!isObject(mapping)) mapping = {};
      _mapping = {};
      for (key in mapping) {
        value = mapping[key];
        if (ko.isObservable(value)) {
          _mapping[key] = ko.observable(ko.utils.unwrapObservable(value));
        } else if (isFunction(value)) {
          (function() {
            var _value;
            _value = value;
            return _mapping[key] = function() {
              return _value.call(arguments[0], arguments[0], _this);
            };
          })();
        } else {
          _mapping[key] = value;
        }
      }
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        if (Falcon.isDataObject(model)) model.map(_mapping);
      }
      this._mappings.push(_mapping);
      return this;
    };

    /*
    	# Method: Falcon.Collection#pluck
    	#	Method used to pluck values from each model in the list of models.
    	#
    	# Arguments:
    	#	**keys** _(String)_ - The key to look at in each mode
    	#			_(Array)_ - An array of keys to pluck from the model, value returned in the same order
    	#	**unwrap** _(Boolean)_ - Flag to state if we should or shouldn't unwrap values that are observables, default is true
    	#
    	# Returns:
    	#	_(Array)_ - An array of the values from each model coresponding to the keys. If the keys was an array, then this is an array of arrays
    */

    Collection.prototype.pluck = function(keys, unwrap) {
      var key, model, plucked_values, _i, _j, _len, _len2, _ref, _ref2;
      if (isString(keys)) keys = keys.split(",");
      if (!isArray(keys)) keys = [];
      if (!(keys.length > 0)) return [];
      if (unwrap == null) unwrap = true;
      plucked_values = [];
      if (keys.length > 1) {
        _ref = this.list();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          if (isObject(model)) {
            plucked_values.push((function() {
              var _j, _len2, _results;
              _results = [];
              for (_j = 0, _len2 = keys.length; _j < _len2; _j++) {
                key = keys[_j];
                _results.push(unwrap ? ko.utils.unwrapObservable(model[key]) : model[key]);
              }
              return _results;
            })());
          } else {
            plucked_values.push(window.undefined);
          }
        }
      } else {
        _ref2 = this.list();
        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
          model = _ref2[_j];
          if (isObject(model)) {
            plucked_values.push((unwrap ? ko.utils.unwrapObservable(model[key]) : model[key]));
          } else {
            plucked_values.push(window.undefined);
          }
        }
      }
      return plucked_values;
    };

    /*
    	# Method: Falcon.Collection#clone
    	# 	Method used to deeply clone this colleciton
    	#
    	# Arguments:
    	#	**parent** _(Falcon.Model)_ - The parent of the clone. optional
    	#
    	# Returns:
    	#	_Falcon.Collection_ - A clone of this collection
    */

    Collection.prototype.clone = function(parent) {
      parent = parent === null || Falcon.isModel(parent) ? parent : this.parent;
      return new this.constructor(this.unwrap(), parent);
    };

    /*
    	# Method: Falcon.Collection#reset
    	#	'resets' the internal array of this collection, 
    	#	this will make sure the list is an observable array, 
    	#	has no elements, and the length is restored to zero
    	#
    	# Returns:
    	#	_Falcon.Collection_ - This instance
    */

    Collection.prototype.reset = function() {
      if (this.list == null) this.list = ko.observableArray([]);
      this.list([]);
      this.length(0);
      this.__change_count__ += 1;
      return this;
    };

    return Collection;

  })(Falcon.Class);

  Falcon.Report = (function(_super) {
    var Axis;

    __extends(Report, _super);

    Axis = (function() {

      function Axis() {
        this.title = "";
        this.format = "";
      }

      Axis.prototype.options = function() {
        return {
          title: this.title,
          format: this.format
        };
      };

      return Axis;

    })();

    /*
    	# Attribute: Report#columns
    	#	A list of columns to use in this format: "[type] [key] [label]"
    	#
    	#	types: 'string' 'number' 'boolean' 'date' 'datetime' 'timeofday'
    */

    Report.prototype.columns = null;

    Report.prototype.url = null;

    Report.prototype._formatting = null;

    Report.prototype.haxis = null;

    Report.prototype.vaxis = null;

    Report.prototype.data = null;

    Report.prototype._parameters = null;

    Report.prototype.response_handler = (function() {});

    function Report(url, columns) {
      var _ref;
      Report.__super__.constructor.call(this);
      if (isArray(url)) _ref = [columns, url], url = _ref[0], columns = _ref[1];
      if (this.url == null) this.url = url != null ? url : "";
      if (this.columns == null) this.columns = columns != null ? columns : [];
      this.data = ko.observableArray([]);
      this.loading = ko.observable(false);
      this._parameters = {};
      this._formatting = {};
      this._current_request = null;
      this.haxis = new Axis();
      this.vaxis = new Axis();
    }

    Report.prototype.param = function(key, value) {
      this._parameters[key] = value;
      return this;
    };

    Report.prototype.fetch = function(success) {
      var key, params, url, value, _ref, _value,
        _this = this;
      url = isFunction(this.url) ? this.url() : this.url;
      if (!isString(url)) url = "";
      if (!isString(url)) return;
      if (!isFunction(success)) success = (function() {});
      this.loading(true);
      params = {};
      _ref = this._parameters;
      for (key in _ref) {
        _value = _ref[key];
        value = ko.utils.unwrapObservable(_value);
        if (Falcon.isModel(value)) {
          params[key] = ko.utils.unwrapObservable(value.id);
        } else if (isFunction(value)) {
          params[key] = value();
        } else {
          params[key] = value;
        }
      }
      url = url + "/";
      for (key in params) {
        value = params[key];
        url = url.replace(":" + key + "/", "" + value + "/");
      }
      url = url.slice(0, -1);
      return this._current_request = $.ajax({
        type: "GET",
        url: url,
        data: params,
        success: function(data) {
          if (data == null) data = [];
          if (!isArray(data)) data = [data];
          _this.data(data);
          _this.trigger("success", data);
          return success.apply(_this, arguments);
        },
        error: function(error) {
          return _this.trigger("error", error);
        },
        complete: function() {
          _this._current_request = null;
          return _this.loading(false);
        }
      });
    };

    Report.prototype.request = function(chart) {
      var _this = this;
      if (chart == null) return;
      return this.fetch(function() {
        var options;
        options = {
          hAxis: _this.haxis.options(),
          vAxis: _this.vaxis.options()
        };
        return chart.draw(_this.dataTable(), options);
      });
    };

    /*
    	# Method: Report#format
    	#	Formats a specific key as a specific format type
    */

    Report.prototype.format = function(key, type, options) {
      var formatter;
      if (!_.isString(key)) key = "";
      if (!_.isString(type)) type = "";
      key = _.trim(key);
      type = _.trim(type).toLowerCase();
      if (_.isEmpty(key)) return;
      if (_.isEmpty(type)) return;
      formatter = (function() {});
      if (type === "number") {
        formatter = function() {
          return new google.visualization.NumberFormat(options);
        };
      }
      return this._formatting[key] = {
        type: type,
        formatter: formatter
      };
    };

    Report.prototype.parseColumn = function(column_str) {
      var coumn_str;
      if (!_.isString(coumn_str)) coumn_str = "";
      return column_str.split(" ", 3);
    };

    Report.prototype.parseItem = function(key, item) {
      var formatting, type;
      item = ko.utils.unwrapObservable(item);
      formatting = this._formatting[key];
      if (formatting != null) {
        type = formatting['type'];
        if (type === "number") return parseFloat(item);
      }
      return item;
    };

    Report.prototype.dataTable = function() {
      var column, index, item, key, key_array, label, table, type, _i, _len, _len2, _ref, _ref2, _ref3;
      table = new google.visualization.DataTable();
      key_array = [];
      _ref = this.columns;
      for (index = 0, _len = _ref.length; index < _len; index++) {
        column = _ref[index];
        _ref2 = this.parseColumn(column), type = _ref2[0], key = _ref2[1], label = _ref2[2];
        key_array.push(key);
        table.addColumn(type, label);
        if (this._formatting[key] != null) {
          this._formatting[key]['formatter']().format(table, index);
        }
      }
      _ref3 = this.data();
      for (_i = 0, _len2 = _ref3.length; _i < _len2; _i++) {
        item = _ref3[_i];
        if (isObject(item)) {
          table.addRow((function() {
            var _j, _len3, _results;
            _results = [];
            for (_j = 0, _len3 = key_array.length; _j < _len3; _j++) {
              key = key_array[_j];
              _results.push(this.parseItem(key, item[key]));
            }
            return _results;
          }).call(this));
        }
      }
      return table;
    };

    return Report;

  })(Falcon.Class);

  Falcon.Event = (function() {

    Event.UP_KEY = 38;

    Event.DOWN_KEY = 40;

    Event.RIGHT_KEY = 39;

    Event.LEFT_KEY = 37;

    Event.ENTER_KEY = 13;

    Event.prototype._element = null;

    /*
    	# Method: Falcon.Event()
    */

    function Event(element) {
      if (element == null) throw new Error("Element must be given");
      this._element = $(element);
    }

    /*
    	# Method: Falcon.Event#on()
    */

    Event.prototype.on = function(event, callback) {
      var element, _callback;
      if (!isString(event)) event = "";
      element = this._element;
      if (!isFunction(callback)) callback = (function() {});
      event = trim(event);
      if (isEmpty(event)) return;
      _callback = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (element.parents('body').length > 0) {
          return callback.call.apply(callback, [this].concat(__slice.call(args)));
        } else {
          return $window.off(event, _callback);
        }
      };
      return $window.on(event, _callback);
    };

    return Event;

  })();

  _shouldUpdate = function(element, value) {
    var changeCount, lastChangeCount;
    if (!Falcon.isCollection(value)) return true;
    changeCount = value.__change_count__;
    lastChangeCount = ko.utils.domData.get(element, "__falcon_collection___change_count__");
    if (lastChangeCount === changeCount) return false;
    ko.utils.domData.set(element, '__falcon_collection___change_count__', changeCount);
    return true;
  };

  _getItems = function(value) {
    var items;
    items = ko.utils.unwrapObservable(Falcon.isCollection(value) ? value.list() : value);
    if (!isArray(items)) items = [items];
    return (function() {
      return items;
    });
  };

  ko.bindingHandlers['view'] = (function() {
    var getTemplate, getViewModel, makeTemplateValueAccessor, returnVal;
    makeTemplateValueAccessor = function(viewModel) {
      return function() {
        return {
          'data': viewModel,
          'templateEngine': ko.nativeTemplateEngine.instance
        };
      };
    };
    getViewModel = function(value) {
      var viewModel, _ref;
      viewModel = {};
      if (value == null) value = {};
      if (value instanceof Falcon.View) {
        viewModel = value.viewModel();
      } else {
        viewModel = ko.utils.unwrapObservable((_ref = value.viewModel) != null ? _ref : {});
      }
      return viewModel;
    };
    getTemplate = function(value) {
      var template, _ref;
      template = "";
      if (value == null) value = {};
      if (value instanceof Falcon.View) {
        template = value.template();
      } else {
        template = ko.utils.unwrapObservable((_ref = value.template) != null ? _ref : "");
      }
      return template;
    };
    returnVal = {
      controlsDescendantBindings: true
    };
    return {
      'init': function(element, valueAccessor, allBindingsAccessor, viewModel, context) {
        var value;
        value = valueAccessor();
        value = ko.utils.unwrapObservable(value);
        viewModel = getViewModel(value);
        if (value instanceof Falcon.View && !value.url) {
          value.template($(element).html());
        }
        ko.bindingHandlers['template']['init'](element, makeTemplateValueAccessor(viewModel), allBindingsAccessor, viewModel, context);
        return returnVal;
      },
      'update': function(element, valueAccessor, allBindingsAccessor, viewModel, context) {
        var anonymousTemplate, execScripts, originalViewContext, template, value;
        value = valueAccessor();
        value = ko.utils.unwrapObservable(value);
        viewModel = getViewModel(value);
        template = getTemplate(value);
        if (!isObject(value)) return returnVal;
        originalViewContext = context['$view'];
        context['$view'] = viewModel;
        if (isEmpty(viewModel) || !(template != null)) $(element).html(" ");
        if (!(value instanceof Falcon.View) || value.isLoaded()) {
          anonymousTemplate = ko.utils.domData.get(element, '__ko_anon_template__');
          anonymousTemplate.containerData.innerHTML = template;
          if ($.browser.msie && $.browser.version < 9) {
            anonymousTemplate.textData = template;
          }
          ko.bindingHandlers['template']['update'](element, makeTemplateValueAccessor(viewModel), allBindingsAccessor, viewModel, context);
          execScripts = !!ko.utils.unwrapObservable(value.execScripts);
          if (template !== anonymousTemplate && execScripts === true) {
            $(element).find("script").each(function(index, script) {
              script = $(script);
              if (script.attr('type').toLowerCase() === "text/javascript") {
                return eval(script.text());
              }
            });
          }
        }
        context['$view'] = originalViewContext;
        return returnVal;
      }
    };
  })();

  _foreach = ko.bindingHandlers['foreach'];

  ko.bindingHandlers['foreach'] = {
    'init': function() {
      var args, element, value, valueAccessor, _ref;
      element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      value = ko.utils.unwrapObservable(valueAccessor());
      ko.utils.domData.set(element, '__falcon_collection___change_count__', -1);
      return ((_ref = _foreach['init']) != null ? _ref : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
    },
    'update': function() {
      var args, element, value, valueAccessor, _ref;
      element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      value = ko.utils.unwrapObservable(valueAccessor());
      if (_shouldUpdate(element, value)) {
        return ((_ref = _foreach['update']) != null ? _ref : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
      }
    }
  };

  for (key in _foreach) {
    value = _foreach[key];
    if (!(key in ko.bindingHandlers['foreach'])) {
      ko.bindingHandlers['foreach'][key] = value;
    }
  }

  ko.bindingHandlers['collection'] = ko.bindingHandlers['foreach'];

  _options = (_ref = ko.bindingHandlers['options']) != null ? _ref : (function() {});

  ko.bindingHandlers['options'] = (function() {
    return {
      'init': function() {
        var args, element, valueAccessor, _ref2;
        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = ko.utils.unwrapObservable(valueAccessor());
        ko.utils.domData.set(element, '__falcon_collection___change_count__', -1);
        return ((_ref2 = _options['init']) != null ? _ref2 : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
      },
      'update': function() {
        var args, element, valueAccessor, _ref2;
        element = arguments[0], valueAccessor = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        value = ko.utils.unwrapObservable(valueAccessor());
        if (_shouldUpdate(element, value)) {
          return ((_ref2 = _options['update']) != null ? _ref2 : (function() {})).apply(null, [element, _getItems(value)].concat(__slice.call(args)));
        }
      }
    };
  })();

  ko.bindingHandlers['log'] = {
    update: function(element, valueAccessor) {
      return console.log(ko.utils.unwrapObservable(valueAccessor()));
    }
  };

  _bindingContext = ko.bindingContext;

  ko.bindingContext = function(dataItem, parentBindingContext) {
    if (!(this['$view'] != null) && (parentBindingContext != null)) {
      this['$view'] = parentBindingContext['$view'] || parentBindingContext['$root'];
    }
    return _bindingContext.call(this, dataItem, parentBindingContext);
  };

  ko.bindingContext.prototype = _bindingContext.prototype;

  ko.virtualElements.allowedBindings['view'] = true;

  ko.virtualElements.allowedBindings['log'] = true;

  ko.virtualElements.allowedBindings['collection'] = true;

  ko.subscribable.fn.classify = function() {
    var extenders, identifier, identifiers, _i, _len;
    identifiers = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    extenders = {};
    for (_i = 0, _len = identifiers.length; _i < _len; _i++) {
      identifier = identifiers[_i];
      if (!(isString(identifier) && !isEmpty(trim(identifier)))) continue;
      identifier = trim(identifier);
      extenders[identifier] = true;
    }
    return this.extend(extenders);
  };

}).call(this);
